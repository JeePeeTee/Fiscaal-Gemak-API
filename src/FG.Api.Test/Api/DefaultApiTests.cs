#region Copyright (c) 2000-2020 Sultan CRM BV

// ===========================================================
// 
// MIT License
// 
// Copyright (c) 2020 Sultan CRM B.V. / Jean Paul Teunisse
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ===========================================================

#endregion

#region usings

using FG.Api.Api;
using NUnit.Framework;

#endregion

namespace FG.Api.Test {
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests {
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init() {
            instance = new DefaultApi();
            instance.Configuration.DefaultHeader.Add("U4-API-KEY", "<your api key here>");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup() {
        }

        private DefaultApi instance;

        /// <summary>
        /// Test AddClient
        /// </summary>
        [Test]
        public void AddClientTest() {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelClient body = null;
            //var response = instance.AddClient(body);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }

        /// <summary>
        /// Test DeleteClient
        /// </summary>
        [Test]
        public void DeleteClientTest() {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteClient(id);
        }

        /// <summary>
        /// Test GetClients
        /// </summary>
        [Test]
        public void GetClientsTest() {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetClients();
            //Assert.IsInstanceOf<List<ModelClient>> (response, "response is List<ModelClient>");
        }

        /// <summary>
        /// Test GetClient
        /// </summary>
        [Test]
        public void GetClientTest() {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetClient(id);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest() {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test UpdateClient
        /// </summary>
        [Test]
        public void UpdateClientTest() {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelClient body = null;
            //int? id = null;
            //var response = instance.UpdateClient(body, id);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }
    }
}